name: Build JDA Plugin

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: List Resources Directory
        run: ls -l src/main/resources/
        if: always()

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract Plugin Version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PLUGIN_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build with Maven
        run: mvn clean package -U
        env:
          MAVEN_OPTS: -Xmx2g

      - name: List Target Directory
        run: ls -l target/
        if: always()

      - name: Inspect JAR Contents
        run: unzip -l target/JDA-${{ env.PLUGIN_VERSION }}.jar
        if: always()

      - name: Extract and Display Resource Files
        run: |
          mkdir -p temp
          unzip target/JDA-${{ env.PLUGIN_VERSION }}.jar plugin.yml bungee.yml velocity-plugin.json -d temp || echo "Some resource files not found in JAR"
          ls -l temp/
          cat temp/plugin.yml || echo "plugin.yml not found"
          cat temp/bungee.yml || echo "bungee.yml not found"
          cat temp/velocity-plugin.json || echo "velocity-plugin.json not found"
        if: always()

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: JDA-Plugin
          path: target/JDA-${{ env.PLUGIN_VERSION }}.jar
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Debug Tag and Environment
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Plugin Version: ${{ env.PLUGIN_VERSION }}"
          echo "Expected Tag: v${{ env.PLUGIN_VERSION }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "GitHub SHA: ${{ github.sha }}"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Plugin Version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PLUGIN_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: JDA-Plugin
          path: target/

      - name: List Downloaded Artifact
        run: ls -l target/
        if: always()

      - name: Delete Previous Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Listing releases..."
          gh release list --json id,title --jq '.[] | {id: .id, title: .title}' || echo "Failed to list releases"
          RELEASE_IDS=$(gh release list --json id --jq '.[].id' || echo "")
          if [ -n "$RELEASE_IDS" ]; then
            for ID in $RELEASE_IDS; do
              echo "Deleting release with ID: $ID"
              gh release delete "$ID" --yes || echo "Failed to delete release $ID"
            done
          else
            echo "No previous releases found."
          fi
        continue-on-error: true

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release for v${{ env.PLUGIN_VERSION }}"
          JAR_PATH="target/JDA-${{ env.PLUGIN_VERSION }}.jar"
          if [ -f "$JAR_PATH" ]; then
            gh release create "v${{ env.PLUGIN_VERSION }}" \
              --title "JDA Plugin v${{ env.PLUGIN_VERSION }}" \
              --notes "Release for JDA Plugin version ${{ env.PLUGIN_VERSION }}" \
              "$JAR_PATH" || echo "Failed to create release"
          else
            echo "Error: JAR file $JAR_PATH not found"
          fi
        continue-on-error: true
